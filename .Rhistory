n
#     변수에 대한 교차표 생성!
# 29. ftable function
#     변수에 대한 교차표 생성!
ftable(vs~gear, data = mtcars)
unique(mtcars$vs)
unique(mtcars$gear)
f <- function(x) x^2
f
formals(f)
body(f)
formals(f)
environment(f)
# * R의 모든 객체들처럼, 함수도 attributes()로 임의의 추가 속성을 가질 수 있음
attributes(f)
nctions)
# 3가지 요소를 가진다는 규칙에는 한가지 예외가 있는데, 원시 함수에 해당
# 다음과 같은 윈시 함수는 Primitive()로 직접 C 코드를 호출하는데, 이 함수는 R 코드가 없음
# 따라서 3가지 요소가 모두 NULL 임
sum
# 원시 함수 -> sum
sum
formula(sum)
formals(sum)
body(sum)
environment(sum)
# 6.1.2 연습문제
# 객체의 함수 여부를 알려주는 함수? 원시 함수 여부를 알려주는 함수?
# -> is.function
is.function
# 6.1.2 연습문제
# 객체의 함수 여부를 알려주는 함수? 원시 함수 여부를 알려주는 함수?
# -> is.function(), -> is.primitive()
is.function(f)
is.primitive(f)
is.primitive(sum)
# 2. 다음 코드는 base 패키지 내의 모든 함수 목록을 만듬
objs <- mget(ls("package:base"), inherits = TRUE)
Filter(is.function, objs)
funs <- Filter(is.function, objs)
str(funs)
formals(funs)
formals(sum)
funs$abbreviate
funs[[1]]
formals(funs[[1]])
# 2.a base 함수 중 어느 것이 가장 많은 인자를 가지는가?
# formals function은 기본적으로 base 내에 있는 primitives function 에서는 NULL 로 return
t.funs <- sapply(funs, function(x) length(formals(x)))
t.funs
max(t.funs)
t.funs(order(t.funs))
# 2.a base 함수 중 어느 것이 가장 많은 인자를 가지는가?
# formals function은 기본적으로 base 내에 있는 primitives function 에서는 NULL 로 return
t.funs <- sapply(funs, function(x) length(formals(x)))
t.funs[order(t.funs)]
t.funs[order(t.funs)][1]
t.funs[order(t.funs)][210]
t.funs[order(t.funs, decreasing = T)]
t.funs[order(t.funs, decreasing = T)][1]
# 2.c 모든 원시 함수를 찾는 데 이 코드를 어떻게 적용할 수 있는가?
Filter(funs, is.primitive)
# 2.c 모든 원시 함수를 찾는 데 이 코드를 어떻게 적용할 수 있는가?
Filter(is.primitive, funs)
Filter(is.primitive, funs)
f
f <- function(x) x^2
f # -> 해당 함수에 대한 environment 가 나오지 않음
# util function 정리
# 1. Filter function
# 첫 번째 인자 : 결과 값이 logical 형태인 함수
# 두 번째 인자 : 확인하고자 하는 objects
Filter(is.primitive, funs)
# util function 정리
# 1. Filter function
# 첫 번째 인자 : 결과 값이 logical 형태인 함수
# 두 번째 인자 : 확인하고자 하는 objects
Filter(is.primitive, funs)
# util function 정리
# 1. Filter function
# 첫 번째 인자 : 결과 값이 logical 형태인 함수
# 두 번째 인자 : 확인하고자 하는 objects
Filter(is.primitive, funs)
# 1. name masking
# 다음 함수의 결과는, 쉽게 이해할 수 있다.
# 함수 내에 x,y 라는 변수를 선언 했으므로, 결과는
f <- function(){
x <- 1
y <- 2
c(x, y)
}
# util function 정리
# 1. Filter function
# 첫 번째 인자 : 결과 값이 logical 형태인 함수
# 두 번째 인자 : 확인하고자 하는 objects
Filter(is.primitive, funs)
f()
mget(ls("package:base"), inherits = T)
objs <- mget(ls("package:base"), inherits = T)
funs <- Filter(is.function, objs)
funs
funs <- Filter(is.function, objs)
funs
# 2.a base 함수 중 어느 것이 가장 많은 인자를 가지는가?
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
funs
t.funs[order(t.funs, decreasing = T)][1]
a <- NULL
a
exists(a)
exists("a")
exists("bb")
exists("a")
# R에서 일어나는 것이 모두 함수이므로, 다음과 같이 사용 가능
# 1. sapply 내에 + 연산자 이용하는 경우,
sapply(1:10, '+', 3)
f <- function(x = ls()){
a <- 1
x
}
f <- function(x = ls()){
a <- 1
x
}
f(ls())
f()
f(a = 1, b = 2)
f <- function(...){
names(list(...))
}
f(a = 1, b = 2)
# 1. 특이한 함수 호출을 명확히 설명해 보라
x <- sample(replace = T, 20, x = c(1:10, NA))
x
x <- sample(replace = T, 20, x = c(1:10, NA))
x
x <- sample(replace = T, 20, x = c(1:10, NA))
x
x <- sample(replace = T, 20, x = c(1:10, NA))
x
y <- runif(min = 0, max = 1, 20)
y
y <- runif(min = 0, max = 1, 20)
y
cor(m = "k", y = y, u = "p", x = x)
# 2. 다음의 함수는 무엇을 반환하는가? 그 이유는 무엇인가?
#    이를 설명하는 원칙은 무엇인가?
f1 <- function(x = {y <- 1; 2}, y = 0){
x + y
}
f1()
# 3. 다음 함수가 반환하는 것은 무엇인가? 그 이유는 무엇인가?
f2 <- function(x = z){
z <- 100
x
}
f2()
# 대부분의 함수는 접두 연산자이므로, 함수의 이름이 제일 앞에 옴
# +, -, ^ 등 가운데 오는 것들은 삽입 함수!
# -> 만드려면 앞 뒤에 %를 붙여서 만들어야 함
'%+%' <- function(a, b) paste0(a, b)
"new" %+% "string"
1 + 5
'+'(1, 5)
# 2. exists function
# 변수가 선언되어 메모리 상에 올라갔는지의 여부를 파악
# ** 반드시 변수명이 문자형으로 들어가야함
a <- NULL
# 삽입 함수의 이름은 일반 함수의 이름보다 유연하다(유연하다는 것은 특수문자도 함수명으로 사용할 수 있다는 것을 의미!)
# -> 어떤 문자 시퀀스도 가능!(%는 제외)
# R의 기본적 우선순위 규칙은, 삽입 연산자가 왼쪽에서 오른쪽으로 구성.
'%-%' <- function(a, b) paste0("(", a, "%-%", b, ")")
"a" %-% "b" %-% "c"
# 예시. 다음 함수(second)는 두 번째 인자를 변경해주는 함수
'second<-' <- function(x, value){
x[2] <- value
x
}
x <- 1:10
second(x) <- 5L
x
sapply(objs, function(x) grep("<-", x))
repl_nms <- ls(baseenv(), all.names = T, pattern = "<-$")
repl_nms
repl_nms     <- ls(baseenv(), all.names = T, pattern = "<-$")
repl_objects <- mget(repl_nms, baseenv())
repl_objects
repl_functions <- Filter(is.function, repl_objects)
length(repl_functions)
repl_nms       <- ls(baseenv(), all.names = T, pattern = "<-$")
repl_objects   <- mget(repl_nms, baseenv())
repl_functions <- Filter(is.function, repl_objects)
length(repl_functions)
names(Filter(is.primitive, repl_functions))
# 2. exists function
# 변수가 선언되어 메모리 상에 올라갔는지의 여부를 파악
# ** 반드시 변수명이 문자형으로 들어가야함
a <- NULL
# 3. xor() 삽입 연산자를 만들어보아라
# -> 두 개중 한개만 참인 경우,
'%xor%' <- function(a, b){
(a || b) & !(a & b)
}
T %xor% F
F %xor% F
T %xor% T
f1()
f2()
f2 <- function() invisible(1)
f2()
f1()
tt <- f2()
tt
# 하나의 값을 여러 변수에 할당 가능
a <- b <- c <- d <- e <- 2
old <- setwd(dir)
old
in_dir <- function(dir, code){
old <- setwd(dir)
on.exit(setwd(old))
}
in_dir <- function(dir, code){
old <- setwd(dir)
on.exit(setwd(old))
force(code)
}
getwd()
in_dir("~", getwd())
getwd()
in_dir("~", getwd())
getwd("~")
# OO 속성을 시험하는데 유용한 함수에 접근하기 위해 pryr package 설치
install.pacakges("pryr")
# OO 속성을 시험하는데 유용한 함수에 접근하기 위해 pryr package 설치
install.packges("pryr")
# OO 속성을 시험하는데 유용한 함수에 접근하기 위해 pryr package 설치
install.packages("pryr")
library(pryr)
f <- function(){} # 다음 함수의 베이스 타입은 '클로저' 이다
typeof(f)
is.function(f)
typeof(sum)
typeof(sum)       # 원시 함수의 타입은 'builtin'이다
typeof(sum)       # 원시 함수의 베이스 타입은 'builtin'이다
is.primitive(sum) # 원시 함수이기도 하다
library(pryr)
df <- data.frame(x = 1:10, y = letters[1:4])
df <- data.frame(x = 1:10, y = letters[1:10])
df
pryr::otype(df)
otype(df$x)
typeof(df)
typeof(df$x)
mean
pryr::ftype(mean)
mean              #
sum
cbind
mode
cbind
sum
ftype(sum)
pryr::ftype(mean) # s3 , generic
ftype(sum)
pryr::ftype(cbind)
# 일반적으로 어떤 '틀(frame)'을 의미
iris
iris[,"Species"]
test <- iris[,"Species"]
library(dplyr)
iris %>% distinct(Species)
paste(d, c(1:10))
paste("d", c(1:10))
paste("d", c(1:10), sep = "")
var <- paste("d", c(1:10), sep = "")
library(dplyr)
train_fd <- data.frame(d1 = c(1,2,0,2,2), d2 = c(1,1,1,1,0), d3 = c(1,1,1,1,1))
var <- paste("d", c(1:3), sep = "")
var
train_fd %>% filter(!var := 0)
train_fd <- data.frame(d1 = c(1,2,0,2,2), d2 = c(1,1,1,1,0), d3 = c(1,1,1,1,1))
var <- paste("d", c(1:3), sep = "")
train_fd %>% filter(!var := 0)
train_fd %>% filter(!!sym(var) != 0)
library(stringr)
train_fd %>% filter(!!sym(var) != 0)
?sym
library(rlang)
train_fd %>% filter(!!sym(var) != 0)
train_df %>% filter_(!!sym(var) != 0)
train_fd %>% filter_(!!sym(var) != 0)
var
sapply(var, function(x)train[, var] != 0)
sapply(var, function(x)train_fd[, var] != 0)
train_fd[, var]
sapply(var, function(x)train_fd[, x] != 0)
any(sapply(var, function(x)train_fd[, x] != 0))
sapply(var, function(x)train_fd[, x] != 0)
train_fd[,var]
train_fd[,var] != 0
sapply(train_fd[,var] != 0, function(x) print(x))
sapply(1:nrow(train_fd), function(x){
any(train_fd[x, var] != 0)
})
sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] != 0)
})
train_fd[sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] != 0)
}),]
train_fd[sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] == 0)
}),]
var <- paste("d", c(1:10), sep = "")
train_fd[sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] != 0)
}),]
train_fd <- data.frame(d1 = c(1,2,0,2,2), d2 = c(1,1,1,1,0), d3 = c(1,1,1,1,1))
var <- paste("d", c(1:10), sep = "")
train_fd[sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] != 0)
}),]
train_fd[sapply(1:nrow(train_fd), function(x){
all(train_fd[x, var] != 0)
}),]
acs
require(mytable)
install.packages("devtools")
devtools::install.github("cardiomon/mytable")
require(mytable)
# 데이터 로딩
train <- read.csv('./2ndCompetitionData/train.csv')
test  <- read.csv('./2ndCompetitionData/test.csv')
head(train)
View(train)
# 데이터 로딩
train <- read.csv('./2ndCompetitionData/train.csv', na.strings = c('NA', ''), stringAsFactors = F)
test  <- read.csv('./2ndCompetitionData/test.csv', na.strings  = c('NA', '', stringAsFactors = F))
# 데이터 로딩
train <- read.csv('./2ndCompetitionData/train.csv', na.strings = c('NA', ''), stringAsFactors = F)
# 데이터 로딩
train <- read.csv('./2ndCompetitionData/train.csv', na.strings = c('NA', ''), stringsAsFactors = F)
test  <- read.csv('./2ndCompetitionData/test.csv', na.strings  = c('NA', ''), stringsAsFactors = F)
View(train)
library(Amelia)
install.packages("Amelia")
# 결측치 확인을 위한 Amelia plot 확인
library(Amelia)
version()
version
missmap(tr)
missmap(train)
getwd()
movingAvrDetec <- function(){
}
movingAvrDetec <- function(){
}
set.seed(4)
data <- read.csv("webTraffic.csv", sep = ",", header = T)
setwd('C:/r')
data <- read.csv("webTraffic.csv", sep = ",", header = T)
head(data)
set.seed(4)
ma
ma?
movingAvrDetec <- function(){
}
install.packages("forecast")
library(forecast)
numbers <- c(3, 5, 3, 6, 4, 5, 3, 4, 4, 6, 3, 5, 4, 6, 3, 5, 4, 4, 6, 3, 5)
ma(numbers, 5)
set.seed(4)
data <- read.csv("webTraffic.csv", sep = ",", header = T)
days = as.numeric(data$Visite)
days
d
days
floor(runif(1, 1, 50))
for (i in 1:45) {
pos = floor(runif(1, 1, 50))
days[i*15+pos] = days[i*15+pos]^1.2
}
days[510+pos] = 0
plot(as.ts(days))
days
install.packages("FBN")
decomposed_days = decompose(ts(days, frequency = 7), "multiplicative")
plot(decomposed_days)
random = decomposed_days$random
random
random = decomposed_days$random
min = mean(random, na.rm = T) - 4*sd(random, na.rm = T)
max = mean(random, na.rm = T) + 4*sd(random, na.rm = T)
plot(as.ts(as.vector(random)), ylim = c(-0.5,2.5))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
position = data.frame(id=seq(1, length(random)), value=random)
anomalyH = position[position$value > max, ]
anomalyH = anomalyH[!is.na(anomalyH$value), ]
anomalyL = position[position$value < min, ]
anomalyL = anomalyL[!is.na(anomalyL$value), ]
anomaly = data.frame(id=c(anomalyH$id, anomalyL$id), value=c(anomalyH$value, anomalyL$value))
anomaly = anomaly[!is.na(anomaly$value), ]
plot(as.ts(days))
real = data.frame(id=seq(1, length(days)), value=days)
realAnomaly = real[anomaly$id, ]
points(x = realAnomaly$id, y =realAnomaly$value, col="#e15f3f")
## 2. 이동 중앙값(moving median)을 이용한 anomaly detection 수행
library(forecast)
library(stats)
trend = runmed(days, 7)
trend
days
length(days)
length(trend)
plot(as.ts(trend))      #
detrend = days / as.vector(trend)
detrend
m = t(matrix(data = detrend, nrow = 7))      #
m
seasonal = colMeans(m, na.rm = T)            #
seasonal
detrend = days / as.vector(trend)            # 기존 중앙값으로 row data를 나눠줌
m = t(matrix(data = detrend, nrow = 7))      # 7일씩 구성될 수 있도록 matrix 구성
seasonal = colMeans(m, na.rm = T)            # 계절성을 제외하기 위해서 주기 평균 계산
random = days / (trend * seasonal)           # 기존 데이터에 trend, seasonal 를 나누어 줌
r
random
rm_random = runmed(random[!is.na(random)], 3) # 다시 해당 데이터의 중앙 값을 계산
rm_random
min = mean(rm_random, na.rm = T) - 4*sd(rm_random, na.rm = T)
max = mean(rm_random, na.rm = T) + 4*sd(rm_random, na.rm = T)
min
max
plot(as.ts(random))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
min
max
decomposed_days
require(FBN)
decomposed_days = decompose(ts(days, frequency = 7), "additive")
plot(decomposed_days)
plot(decomposed_days$trend)
ggplot(decomposed_days)
require(FBN);require(ggplot2)
ggplot(decomposed_days)
decomposed_days
decomposed_days = decompose(ts(days, frequency = 7), "multiplicative")
trend_data <- dcomposed_days[,'trend']
decomposed_days
decomposed_days[,'trend']
decomposed_days[['trend']]
min = mean(random, na.rm = T) - 4*sd(random, na.rm = T)
max = mean(random, na.rm = T) + 4*sd(random, na.rm = T)
plot(as.ts(as.vector(trend_data)), ylim = c(-0.5,2.5))
trend_data <- decomposed_days[['trend']]
trend_data
min = mean(random, na.rm = T) - 4*sd(random, na.rm = T)
max = mean(random, na.rm = T) + 4*sd(random, na.rm = T)
plot(as.ts(as.vector(trend_data)), ylim = c(-0.5,2.5))
min = mean(trend_data, na.rm = T) - 4*sd(trend_data, na.rm = T)
max = mean(trend_data, na.rm = T) + 4*sd(trend_data, na.rm = T)
min
max
ifelse(min < 0, 0, min)
plot(as.ts(as.vector(trend_data)), ylim = c(-0.5,2.5))
as.vector(trend_data)
as.ts(as.vector(trend_data))
plot(as.ts(as.vector(trend_data)))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
max
min
trend_data <- decomposed_days[['trend']]
min = mean(trend_data, na.rm = T) - sigma*sd(trend_data, na.rm = T)
min
min = ifelse(min < 0, 0, min)
max = mean(trend_data, na.rm = T) + sigma*sd(trend_data, na.rm = T)
max
plot(as.ts(as.vector(trend_data)))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
random
plot(as.ts(as.vector(random)), ylim = c(-0.5,2.5))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
plot(as.ts(as.vector(trend_data)), ylim = c(min-0.5,max+0.5))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
p <- plot(as.ts(as.vector(trend_data)), ylim = c(min-0.5,max+0.5))
abline(h=max, col="#e15f3f", lwd=2)
abline(h=min, col="#e15f3f", lwd=2)
p
# 이상 위치 detect point 찍어주기
position = data.frame(id=seq(1, length(random)), value=random)
position
position[position$value > max, ]
anomalyH = position[position$value > max, ]
real
real <- df[,Xvar]
trend_data
as.ts(as.vector(trend_data))
## data loading
setwd("C:/r/daconData/")
test  <- read.csv("test.csv")
## data loading
setwd("C:/r/dacon_13th/")
## data loading
setwd("C:/dacon_13th/")
test  <- read.csv("test.csv")
